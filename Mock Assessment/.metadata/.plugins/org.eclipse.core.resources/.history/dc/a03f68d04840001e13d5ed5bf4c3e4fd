package com.dao;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.entities.Account;
import com.entities.BankTransaction;
import com.exception.InvalidBankTransactionException;
import com.repository.AccountRepository;
import com.repository.TransactionRepository;

@Component
public class TransactionDAOImpl implements ITransactionDAO {
	
	//Provide code to Inject TransactionRepository and AccountRepository
	//Provide code to Inject AccountRepository, if needed
	@Autowired
    private TransactionRepository transactionRepository;
    
    @Autowired
    private AccountRepository accountRepository;
	
	@Override
	public BankTransaction insertTransaction(BankTransaction transactionObj,String accountNumber) throws InvalidBankTransactionException{
		
		//fill code
		Optional<Account> accountOptional = accountRepository.findById(accountNumber);
		if (accountOptional.isPresent()) {
			Account account = accountOptional.get(); 
			if (transactionObj.getTransactionType().equals("Deposit")) {
				account.setBalanceAmount(account.getBalanceAmount() + transactionObj.getAmount());
			} else {
				account.setBalanceAmount(account.getBalanceAmount() - transactionObj.getAmount());
			} 
			transactionObj.setAccountObj(account);
			accountRepository.save(account);
			return transactionRepository.save(transactionObj);
		}
		throw new InvalidBankTransactionException("Account not found for id: " + accountNumber);
	}
	
	@Override
	public List<BankTransaction> viewTransactionByAccountNumber(String accountNumber) throws InvalidBankTransactionException{
		//fill code
		Optional<Account> accountOptional = accountRepository.findById(accountNumber);
        if (accountOptional.isEmpty()) {
            throw new InvalidBankTransactionException("Account not found for id: " + accountNumber);
        }
        
        return transactionRepository.findAll().stream()
        		.filter(trans -> trans.getAccountObj().getAccountNumber().equals(accountNumber))
        		.collect(Collectors.toUnmodifiableList());
    }
	
	@Override
	public List<BankTransaction> viewTransactionByTransactionType(String transactionType){
		//fill code
		return transactionRepository.findAll().stream()
        		.filter(trans -> trans.getTransactionType().equals(transactionType))
        		.collect(Collectors.toUnmodifiableList());
	}
	
	@Override
	public List<BankTransaction> viewTransactionByTransactionTypeAndAmount(String transactionType,double amount){
		//fill code
		return transactionRepository.findAll().stream()
        		.filter(trans -> trans.getTransactionType().equals(transactionType))
        		.filter(trans -> trans.getAmount() >= amount)
        		.collect(Collectors.toUnmodifiableList());
	}
}